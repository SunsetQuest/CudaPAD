<?xml version="1.0" encoding="utf-8" ?>
<ScintillaNET>
<Language Name="cu">
<AutoComplete FillUpCharacters=".([" SingleLineAccept="True" IsCaseSensitive="False">
<List>
        abstract as base break case catch checked continue default delegate do else event explicit extern
        false finally fixed for foreach goto if implicit in interface internal is lock namespace new null
        object operator out override params private protected public readonly ref return sealed sizeof
        stackalloc switch this throw true try typeof unchecked unsafe using virtual while bool byte char
        class const decimal double enum float int long sbyte short static string struct uint ulong ushort void
        int1 uint1 int2 uint2 int3 uint3 int4 uint4 float1 float2 float3 float4 
        char1 char2 char3 char4 uchar1 uchar2 uchar3 uchar4 short1 short2 short3 short4 
        dim1 dim2 dim3 dim4 tex1D tex1Dfetch tex2D __float_as_int __int_as_float __float2int 
        __float2int_rz __float2int_ru __float2int_rd __float2uint_rn __float2uint_rz __float2uint_ru 
        __float2uint_rd __int2float_rn __int2float_rz __int2float_ru __int2float_rd __uint2float_rn 
        __uint2float_rz __uint2float_ru __uint2float_rd __fadd_rz __fmul_rz __fdividef __mul24 
        __umul24 __mulhi __umulhi __mul64hi __umul64hi min umin fminf fmin max umax 
        fmaxf fmax div abs fabsf fabs sqrtf sqrt sinf __sinf sin cosf __cosf cos sincosf 
        __sincosf expf __expf exp logf __logf log __syncthreads threadIdx char __shared__ __global__  
</List>
</AutoComplete>

<Indentation TabWidth="4" SmartIndentType="cpp" />

<Lexer LexerName="cpp" LineCommentPrefix="/*" StreamCommentPrefix="/* " StreamCommentSuffix=" */" >
<Keywords List="0" Inherit="False">
        abstract as base break case catch checked continue default delegate do else event explicit extern
        false finally fixed for foreach goto if implicit in interface internal is lock namespace new null
        object operator out override params private protected public readonly ref return sealed sizeof
        stackalloc switch this throw true try typeof unchecked unsafe using virtual while
</Keywords>
<Keywords List="1" Inherit="False">
        bool byte char class const decimal double enum float int long sbyte
        short static string struct uint ulong ushort void
        int1 uint1 int2 uint2 int3 uint3 int4 uint4 float1 float2 float3 float4 
        char1 char2 char3 char4 uchar1 uchar2 uchar3 uchar4 short1 short2 short3 short4 
        dim1 dim2 dim3 dim4 tex1D tex1Dfetch tex2D __float_as_int __int_as_float __float2int 
        __float2int_rz __float2int_ru __float2int_rd __float2uint_rn __float2uint_rz __float2uint_ru 
        __float2uint_rd __int2float_rn __int2float_rz __int2float_ru __int2float_rd __uint2float_rn 
        __uint2float_rz __uint2float_ru __uint2float_rd __fadd_rz __fmul_rz __fdividef __mul24 
        __umul24 __mulhi __umulhi __mul64hi __umul64hi min umin fminf fmin max umax 
        fmaxf fmax div abs fabsf fabs sqrtf sqrt sinf __sinf sin cosf __cosf cos sincosf 
        __sincosf expf __expf exp logf __logf log __syncthreads threadIdx char __shared__ __global__ 
</Keywords>
</Lexer>
    <Snippets>

      <Snippet Shortcut="~">
        ~$classname$()
        {
        $end$
        }
      </Snippet>

      <Snippet Shortcut="checked" IsSurroundsWith="True">
        checked
        {
        $selected$
        }$end$
      </Snippet>

      <Snippet Shortcut="class" IsSurroundsWith="true">
        public class $name$
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="f" IsSurroundsWith="True">
        for (int $i$ = $0$; $i$ &lt; $max$; $i$++)
        {
        $selected$$end$
        }$DropMarker$
      </Snippet>

      <Snippet Shortcut="fe" IsSurroundsWith="True">
        foreach ($object$ $item$ in $collection$)
        {
        $selected$$end$
        }$DropMarker$
      </Snippet>

      <Snippet Shortcut="do" IsSurroundsWith="true">
        do
        {
        $end$$selected$
        } while ($expression$);
        $DropMarker$
      </Snippet>

      <Snippet Shortcut="namespace" IsSurroundsWith="true">
        namespace $name$
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="#region" IsSurroundsWith="true">
        #if $expression$
        $end$$selected$
        #endif$DropMarker$
      </Snippet>

      <Snippet Shortcut="#region" IsSurroundsWith="true">
        #region $name$
        $end$$selected$
        #endregion$DropMarker$
      </Snippet>

      <Snippet Shortcut="prop">
        private $type$ $field$;
        public $type$ $property$
        {
        get { return $field$;}
        set { $field$ = value;}
        }
        $end$
      </Snippet>

      <Snippet Shortcut="propg" IsSurroundsWith="false">
        private $type$ $field$;
        public $type$ $property$
        {
        get { return $field$;}
        }
        $end$
      </Snippet>

      <Snippet Shortcut="sim" IsSurroundsWith="false">
        static int Main(string[] args)
        {
        $end$
        return 0;
        }
      </Snippet>

      <Snippet Shortcut="struct" IsSurroundsWith="true">
        struct $name$
        {
        $selected$$end$
        }
      </Snippet>

      <Snippet Shortcut="svm" IsSurroundsWith="false">
        static void Main(string[] args)
        {
        $end$
        }
      </Snippet>

      <Snippet Shortcut="switch" IsSurroundsWith="false">
        switch ($expression$)
        {
        $cases$
        }$end$
      </Snippet>

      <Snippet Shortcut="t" IsSurroundsWith="true">
        try
        {
        $selected$
        }
        catch ($expression$)
        {
        $end$
        throw;
        }
      </Snippet>

      <Snippet Shortcut="tf" IsSurroundsWith="true">
        try
        {
        $selected$
        }
        finally
        {
        $end$
        }
      </Snippet>

      <Snippet Shortcut="unchecked" IsSurroundsWith="true">
        unchecked
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="unsafe" IsSurroundsWith="true">
        unsafe
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="u" IsSurroundsWith="true">
        using($resource$)
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="w" IsSurroundsWith="true">
        while ($expression$)
        {
        $end$$selected$
        }
      </Snippet>

      <Snippet Shortcut="l" IsSurroundsWith="true">
        else
        $anchor$$selected$$caret$
      </Snippet>

      <Snippet Shortcut="lb" IsSurroundsWith="true">
        else
        {
        $anchor$$selected$$caret$
        }
      </Snippet>

      <Snippet Shortcut="enum" IsSurroundsWith="false">
        enum $name$
        {
        $end$
        }
      </Snippet>

      <Snippet Shortcut="equals" IsSurroundsWith="false">
        //	override object.Equals
        public override bool Equals (object obj)
        {
        //
        //	See the full list of guidelines at
        //		http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpconequals.asp
        //	and also the guidance for operator== at
        //		http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpconimplementingequalsoperator.asp
        //

        if (obj == null || GetType() != obj.GetType())
        {
        return false;
        }

        //	TODO: write your implementation of Equals() here.
        $end$throw new NotImplementedException("The method or operation is not implemented.");
        return base.Equals (obj);
        }

        //	override object.GetHashCode
        public override int GetHashCode()
        {
        //	TODO: write your implementation of GetHashCode() here.
        $DropMarker$throw new NotImplementedException("The method or operation is not implemented.");
        return base.GetHashCode();
        }
      </Snippet>
      <Snippet Shortcut="if" IsSurroundsWith="true">
        if ($end$)
        $DropMarker$$selected$
      </Snippet>
      <Snippet Shortcut="ifb" IsSurroundsWith="true">
        if ($end$)
        {
        $DropMarker$$selected$
        }
      </Snippet>
      <Snippet Shortcut="b" IsSurroundsWith="true">
        {
        $end$$selected$
        }
      </Snippet>
      <Snippet Shortcut="indexer" IsSurroundsWith="false">
        public $type$ this[$indextype$ index]
        {
        get {$end$ /* return the specified index here */ }
        set {$dropmarker$ /* set the specified index to value here */ }
        }
      </Snippet>
      <Snippet Shortcut="interface" IsSurroundsWith="false">
        interface I$name$
        {
        $end$
        }
      </Snippet>
      <Snippet Shortcut="lock" IsSurroundsWith="true">
        lock ($expression$)
        {
        $end$$selected$
        }
      </Snippet>
    </Snippets>

</Language>

<Language Name="ptx">
<AutoComplete FillUpCharacters=".([" SingleLineAccept="True" IsCaseSensitive="False">
<List>
       aaa aad aam aas adc add and call cbw
       set setp selp slct 
       and or xor not cnot shl shr 
       mov ld st cvt 
       bra call ret exit 
       bar atom red vote 
       bar atom red vote 
       rcp sqrt rsqrt sin cos lg2 ex2 
       trap brkpt nanosleep
       sync param wide shared global 
       exit
       add addc sub mul mad mul24 sad div rem abs neg min max 
       %tid %ntid %ctaid %nctaid %gridid %clock
       .pred .s8 .s16 .s32 .s64 .u8 .u16 u32 .u64 .f16 .f32 .f64 .b8 .b16 .b32 .b64
       .eq .ne .lt .le .gt .ge .lo .ls .hi .hs .equ .neu .ltu .leu .gtu .geu .num .nan 
</List>
</AutoComplete>
<Lexer LexerName="cpp" LineCommentPrefix="/*" StreamCommentPrefix="/* " StreamCommentSuffix=" */" >
<Keywords List="0" Inherit="False">
       pred s8 s16 s32 s64 u8 u16 u32 u64 f16 f32 f64 b8 b16 b32 b64
       eq ne lt le gt ge lo ls hi hs equ neu ltu leu gtu geu num nan 
</Keywords>
<Keywords List="1" Inherit="False">
       aaa aad aam aas adc add and call cbw
       set setp selp slct 
       and or xor not cnot shl shr 
       mov ld st cvt 
       bra call ret exit 
       bar atom red vote 
       bar atom red vote 
       rcp sqrt rsqrt sin cos lg2 ex2 
       trap brkpt nanosleep
       sync param wide shared global 
       add addc sub mul mad mul24 sad div rem abs neg min max 
	   cvta
</Keywords>
<Keywords List="2" Inherit="False">
</Keywords>
<Keywords List="3" Inherit="False">
  entry exit reg visible tid ntid ctaid nctaid gridid clock
</Keywords>
</Lexer>
</Language>

<Language Name="sass">
<AutoComplete FillUpCharacters=".([" SingleLineAccept="True" IsCaseSensitive="False">
<List>
  ATOM ATOMS
  B2R BAR BFE BFI BPT BRA BRK BRX
  CAL CCTL CCTLL CCTLT CONT CS2R CSET CSETP
  DADD DFMA DMNMX DMUL DSET DSETP
  EXIT
  F2F F2I FADD FCHK FCMP FFMA FLO FMNMX FMUL FSET FSETP FSWZ FSWZADD
  HADD2 HFMA2 HMUL2 HSET2 HSETP2
  I2F I2I IADD IADD3 ICMP IMAD IMADSP IMNMX IMUL ISAD ISCADD ISET ISETP
  JCAL JMP JMX
  LD LDC LDG LDL LDS LDSLK LEA LOP LOP3
  MEMBAR MOV MOV32I MUFU
  NOP
  P2R PBK PCNT PEXIT POPC PRET PRMT PSET PSETP
  R2B R2P RED RET RRO
  S2R SEL SHF SHFL SHL SHR SSY ST STG STL STS STSCUL SUATOM SUBFM SUCLAMP SUEAU SULD SULDGA SURED SUST SUSTGA SYNC
  TEX TEXS TLD TLD4 TLD4S TLDS TXQ
  VOTE
  XMAD
  WARP
</List>
</AutoComplete>
<Lexer LexerName="cpp" LineCommentPrefix="/*" StreamCommentPrefix="/* " StreamCommentSuffix=" */" >
<Keywords List="0" Inherit="False">
  U32 U64 X GT AND NE GEU HI E
</Keywords>
<Keywords List="1" Inherit="False">
  ATOM ATOMS
  B2R BAR BFE BFI BPT BRA BRK BRX
  CAL CCTL CCTLL CCTLT CONT CS2R CSET CSETP
  DADD DFMA DMNMX DMUL DSET DSETP
  EXIT
  F2F F2I FADD FCHK FCMP FFMA FLO FMNMX FMUL FSET FSETP FSWZ FSWZADD
  HADD2 HFMA2 HMUL2 HSET2 HSETP2
  I2F I2I IADD IADD3 ICMP IMAD IMADSP IMNMX IMUL ISAD ISCADD ISET ISETP
  JCAL JMP JMX
  LD LDC LDG LDL LDS LDSLK LEA LOP LOP3
  MEMBAR MOV MOV32I MUFU
  NOP
  P2R PBK PCNT PEXIT POPC PRET PRMT PSET PSETP
  R2B R2P RED RET RRO
  S2R SEL SHF SHFL SHL SHR SSY ST STG STL STS STSCUL SUATOM SUBFM SUCLAMP SUEAU SULD SULDGA SURED SUST SUSTGA SYNC
  TEX TEXS TLD TLD4 TLD4S TLDS TXQ
  VOTE
  XMAD
  WARP
</Keywords>
<Keywords List="2" Inherit="False">
</Keywords>
<Keywords List="3" Inherit="False">
  P0 P1 P2 P3 P4 P5 P6 P7 P8 P9
  @P0 @P1 @P2 @P3 @P4 @P5 @P6 @P7 @P8 @P9
</Keywords>
</Lexer>
</Language>
</ScintillaNET>